import os
import time
import boto3
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from datetime import datetime, timedelta
from urllib.parse import quote_plus

# Configurations
monitor_directory = r"E:\001-MZQ Compliance Services\_Wrapper\Generated Wraps"
s3_bucket = "mzq-mzqplan-s3bucket"
s3_base_path = "mzqplan-aws-cloud/e_drive/test"
sns_topic_arn = "arn:aws:sns:us-west-1:666669385478:mzq-mzqplan-qa3-monitor_and_sync_to_s3"
aws_region = "us-west-1"

suppress_duration = timedelta(minutes=5)
last_notified = {}

s3_client = boto3.client('s3', region_name=aws_region)
sns_client = boto3.client('sns', region_name=aws_region)

class MonitorHandler(FileSystemEventHandler):
    def on_any_event(self, event):
        if not event.is_directory and event.event_type in ['created', 'modified']:
            self.process_event(event.src_path, event.event_type)

    def process_event(self, file_path, event_type):
        current_time = datetime.now()
        if file_path in last_notified:
            if current_time - last_notified[file_path] < suppress_duration:
                print(f"Suppressed duplicate notification for {file_path}")
                return
        last_notified[file_path] = current_time

        print(f"{event_type.capitalize()} detected: {file_path}")
        relative_path = os.path.relpath(file_path, monitor_directory)
        s3_path = os.path.join(s3_base_path, relative_path).replace("\\", "/")
        
        try:
            s3_client.upload_file(file_path, s3_bucket, s3_path)
            print(f"Uploaded {file_path} to s3://{s3_bucket}/{s3_path}")
            self.send_sns_notification(s3_path, event_type)
        except Exception as e:
            print(f"Failed to upload {file_path} to S3: {e}")

    def send_sns_notification(self, s3_path, event_type):
        subject = f"File {event_type.capitalize()}: {os.path.basename(s3_path)}"
        
        # Encode the S3 key for URL
        encoded_s3_key = quote_plus(s3_path)

        # Use the correct base URL for your API Gateway
        base_url = "https://mz1f61hho7.execute-api.us-west-1.amazonaws.com/test"

        # Construct the full URLs
        approve_link = f"{base_url}/approve?s3_key={encoded_s3_key}&bucket_name={s3_bucket}&action=approve"
        deny_link = f"{base_url}/deny?s3_key={encoded_s3_key}&bucket_name={s3_bucket}&action=deny"

        # Create the HTML message with a class for buttons
        message_html = f"""
        <html>
        <body>
            <p>A file has been {event_type} in the monitored directory.</p>
            <p><strong>File:</strong> {s3_path}</p>
            <p><strong>Uploaded to:</strong> s3://{s3_bucket}/{s3_base_path}</p>
            <p>Please review the changes:</p>
            <p>
                <a href="{approve_link}" class="btn">Approve</a>
                <a href="{deny_link}" class="btn">Deny</a>
            </p>
            <style>
                .btn {{
                    display: inline-block;
                    padding: 10px 20px;
                    font-size: 16px;
                    margin: 4px 2px;
                    cursor: pointer;
                    text-align: center;
                    text-decoration: none;
                    color: white;
                    background-color: #4CAF50; /* Green */
                    border: none;
                    border-radius: 5px;
                }}
                .btn + .btn {{
                    background-color: #f44336; /* Red */
                }}
            </style>
        </body>
        </html>
        """

        try:
            response = sns_client.publish(
                TopicArn=sns_topic_arn,
                Message=message_html,
                Subject=subject,
                MessageStructure='html'  # Specify that the message is in HTML format
            )
            print("SNS notification sent! Message ID:", response['MessageId'])
        except Exception as e:
            print(f"Failed to send SNS notification: {e}")

if __name__ == "__main__":
    event_handler = MonitorHandler()
    observer = Observer()
    observer.schedule(event_handler, monitor_directory, recursive=True)
    observer.start()
    print(f"Monitoring {monitor_directory}...")

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
